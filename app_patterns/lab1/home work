// home work 

class Book {
    private String title;
    private String author;
    private String isbn;
    private int copies;

    public Book(String title, String author, String isbn, int copies) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.copies = copies;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public int getCopies() {
        return copies;
    }

    public void setCopies(int copies) {
        this.copies = copies;
    }

    @Override
    public String toString() {
        return "Book: " + title + ", Author: " + author + ", ISBN: " + isbn + ", Copies: " + copies;
    }
}

class Reader {
    private String name;
    private int readerId;

    public Reader(String name, int readerId) {
        this.name = name;
        this.readerId = readerId;
    }

    public String getName() {
        return name;
    }

    public int getReaderId() {
        return readerId;
    }

    @Override
    public String toString() {
        return "Reader: " + name + ", ID: " + readerId;
    }
}

import java.util.ArrayList;
import java.util.List;

class Library {
    private List<Book> books;
    private List<Reader> readers;

    public Library() {
        this.books = new ArrayList<>();
        this.readers = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
        System.out.println("Book added: " + book);
    }

    public void removeBook(Book book) {
        if (books.contains(book)) {
            books.remove(book);
            System.out.println("Book removed: " + book);
        } else {
            System.out.println("Book not found in the library.");
        }
    }

    public void registerReader(Reader reader) {
        readers.add(reader);
        System.out.println("Reader registered: " + reader);
    }

    public void removeReader(Reader reader) {
        if (readers.contains(reader)) {
            readers.remove(reader);
            System.out.println("Reader removed: " + reader);
        } else {
            System.out.println("Reader not found in the system.");
        }
    }

    public void issueBook(Book book, Reader reader) {
        if (!books.contains(book)) {
            System.out.println("Book not available in the library.");
        } else if (book.getCopies() <= 0) {
            System.out.println("No copies available for book: " + book.getTitle());
        } else {
            System.out.println("Book issued: " + book.getTitle() + " to " + reader.getName());
            book.setCopies(book.getCopies() - 1);
        }
    }

    public void returnBook(Book book, Reader reader) {
        if (!books.contains(book)) {
            System.out.println("Book does not belong to this library.");
        } else {
            System.out.println("Book returned: " + book.getTitle() + " by " + reader.getName());
            book.setCopies(book.getCopies() + 1);
        }
    }

    public void printBooks() {
        System.out.println("\nBooks in library:");
        for (Book book : books) {
            System.out.println(book);
        }
    }

    public void printReaders() {
        System.out.println("\nRegistered readers:");
        for (Reader reader : readers) {
            System.out.println(reader);
        }
    }
}

public class LibrarySystem {
    public static void main(String[] args) {
        Library library = new Library();

        Book book1 = new Book("1984", "George Orwell", "123456789", 5);
        Book book2 = new Book("To Kill a Mockingbird", "Harper Lee", "987654321", 3);

        library.addBook(book1);
        library.addBook(book2);

        Reader reader1 = new Reader("John Doe", 1);
        Reader reader2 = new Reader("Jane Smith", 2);

        library.registerReader(reader1);
        library.registerReader(reader2);

        library.issueBook(book1, reader1);
        library.issueBook(book1, reader2);
        library.issueBook(book1, reader1);

        library.printBooks();

        library.returnBook(book1, reader1);

        library.printBooks();

        library.removeBook(book2);

        library.printBooks();

        library.printReaders();

        library.removeReader(reader2);

        library.printReaders();
    }
}


//лабараторная 

class Employee {
    protected String name;
    protected int employeeId;
    protected String position;

    public Employee(String name, int employeeId, String position) {
        this.name = name;
        this.employeeId = employeeId;
        this.position = position;
    }

    public String getName() {
        return name;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    public String getPosition() {
        return position;
    }

    public double calculateSalary() {
        return 0;
    }

    @Override
    public String toString() {
        return "Employee: " + name + ", ID: " + employeeId + ", Position: " + position;
    }
}

class Worker extends Employee {
    private double hourlyRate;
    private int hoursWorked;

    public Worker(String name, int employeeId, double hourlyRate, int hoursWorked) {
        super(name, employeeId, "Worker");
        this.hourlyRate = hourlyRate;
        this.hoursWorked = hoursWorked;
    }

    @Override
    public double calculateSalary() {
        return hourlyRate * hoursWorked;
    }

    @Override
    public String toString() {
        return super.toString() + ", Salary: " + calculateSalary();
    }
}

class Manager extends Employee {
    private double fixedSalary;
    private double bonus;

    public Manager(String name, int employeeId, double fixedSalary, double bonus) {
        super(name, employeeId, "Manager");
        this.fixedSalary = fixedSalary;
        this.bonus = bonus;
    }

    @Override
    public double calculateSalary() {
        return fixedSalary + bonus;
    }

    @Override
    public String toString() {
        return super.toString() + ", Salary: " + calculateSalary();
    }
}

import java.util.ArrayList;
import java.util.List;

class EmployeeSystem {
    private List<Employee> employees;

    public EmployeeSystem() {
        this.employees = new ArrayList<>();
    }

    public void addEmployee(Employee employee) {
        employees.add(employee);
    }

    public void printSalaries() {
        for (Employee employee : employees) {
            System.out.println(employee);
        }
    }
}

public class EmployeeManagement {
    public static void main(String[] args) {
        EmployeeSystem system = new EmployeeSystem();

        Worker worker1 = new Worker("John Doe", 1, 20.0, 160);
        Worker worker2 = new Worker("Jane Smith", 2, 22.0, 150);
        Manager manager1 = new Manager("Alice Brown", 3, 5000.0, 1000.0);

        system.addEmployee(worker1);
        system.addEmployee(worker2);
        system.addEmployee(manager1);

        system.printSalaries();
    }
}


//практическая 


class Vehicle {
    protected String make;
    protected String model;
    protected int year;

    public Vehicle(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void startEngine() {
        System.out.println(make + " " + model + " engine started.");
    }

    public void stopEngine() {
        System.out.println(make + " " + model + " engine stopped.");
    }

    @Override
    public String toString() {
        return "Vehicle: " + make + " " + model + ", Year: " + year;
    }
}

class Car extends Vehicle {
    private int numberOfDoors;
    private String transmissionType;

    public Car(String make, String model, int year, int numberOfDoors, String transmissionType) {
        super(make, model, year);
        this.numberOfDoors = numberOfDoors;
        this.transmissionType = transmissionType;
    }

    @Override
    public String toString() {
        return super.toString() + ", Doors: " + numberOfDoors + ", Transmission: " + transmissionType;
    }
}

class Motorcycle extends Vehicle {
    private String bodyType;
    private boolean hasBox;

    public Motorcycle(String make, String model, int year, String bodyType, boolean hasBox) {
        super(make, model, year);
        this.bodyType = bodyType;
        this.hasBox = hasBox;
    }

    @Override
    public String toString() {
        return super.toString() + ", Body Type: " + bodyType + ", Has Box: " + hasBox;
    }
}

import java.util.ArrayList;
import java.util.List;

class Garage {
    private List<Vehicle> vehicles;

    public Garage() {
        this.vehicles = new ArrayList<>();
    }

    public void addVehicle(Vehicle vehicle) {
        vehicles.add(vehicle);
    }

    public void removeVehicle(Vehicle vehicle) {
        vehicles.remove(vehicle);
    }

    public List<Vehicle> getVehicles() {
        return vehicles;
    }
}

class Fleet {
    private List<Garage> garages;

    public Fleet() {
        this.garages = new ArrayList<>();
    }

    public void addGarage(Garage garage) {
        garages.add(garage);
    }

    public void removeGarage(Garage garage) {
        garages.remove(garage);
    }

    public Vehicle findVehicle(String make, String model) {
        for (Garage garage : garages) {
            for (Vehicle vehicle : garage.getVehicles()) {
                if (vehicle.make.equals(make) && vehicle.model.equals(model)) {
                    return vehicle;
                }
            }
        }
        return null;
    }
}

public class FleetManagement {
    public static void main(String[] args) {
        Fleet fleet = new Fleet();
        Garage garage1 = new Garage();
        Garage garage2 = new Garage();

        Car car1 = new Car("Toyota", "Camry", 2020, 4, "Automatic");
        Car car2 = new Car("Ford", "Focus", 2018, 4, "Manual");
        Motorcycle motorcycle1 = new Motorcycle("Harley-Davidson", "Iron 883", 2019, "Cruiser", true);

        garage1.addVehicle(car1);
        garage2.addVehicle(car2);
        garage2.addVehicle(motorcycle1);

        fleet.addGarage(garage1);
        fleet.addGarage(garage2);

        Vehicle foundVehicle = fleet.findVehicle("Ford", "Focus");
        if (foundVehicle != null) {
            System.out.println("Vehicle found: " + foundVehicle);
        } else {
            System.out.println("Vehicle not found.");
        }
    }
}
