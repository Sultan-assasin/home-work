Произведите корректную (правильную) по вашему мнению реализацию с применением принципа DRY:
public class OrderService
{
    public void CreateOrder(string productName, int quantity, double price)
    {
        ProcessOrder("created", productName, quantity, price);
    }

    public void UpdateOrder(string productName, int quantity, double price)
    {
        ProcessOrder("updated", productName, quantity, price);
    }

    private void ProcessOrder(string action, string productName, int quantity, double price)
    {
        double totalPrice = quantity * price;
        Console.WriteLine($"Order for {productName} {action}. Total: {totalPrice}");
    }
}


Использование общих базовых классов

public class IDrive
{
    public void Start()
    {
        Console.WriteLine($"{GetType().Name} is starting");
    }

    public void Stop()
    {
        Console.WriteLine($"{GetType().Name} is stopping");
    }
}

public class Car : IDrive
{
}

public class Truck : IDrive
{
}





Произведите корректную (правильную) по вашему мнению реализацию с применением принципа KISS:

public class Calculator
{
    public void PerformOperation(Func<int, int, int> operation, int a, int b)
    {
        Console.WriteLine("Result: " + operation(a, b));
    }
}

public class MainClass
{
    public static void Main(string[] args)
    {
        Calculator calculator = new Calculator();

        calculator.PerformOperation((a, b) => a + b, 5, 10);  
        calculator.PerformOperation((a, b) => a - b, 10, 5);  
        calculator.PerformOperation((a, b) => a * b, 5, 10);  
        calculator.PerformOperation((a, b) => a / b, 10, 2);  
    }
}

Избегание избыточного использования шаблонов проектирования
public class SimpleService
{
    public void DoSomething()
    {
        Console.WriteLine("Doing something...");
    }
}

public class Client
{
    private SimpleService _service;

    public Client(SimpleService service)
    {
        _service = service;
    }

    public void Execute()
    {
        _service.DoSomething();
    }
}

public class MainClass
{
    public static void Main(string[] args)
    {
        SimpleService service = new SimpleService();
        Client client = new Client(service);
        client.Execute();
    }
}


Произведите корректную (правильную) по вашему мнению реализацию с применением принципа YAGNI:




using System;

public class Circle
{
    private double _radius;

    public Circle(double radius)
    {
        _radius = radius;
    }

    public double CalculateArea()
    {
        return Math.PI * _radius * _radius;
    }
}

public class Square
{
    private double _side;

    public Square(double side)
    {
        _side = side;
    }

    public double CalculateArea()
    {
        return _side * _side;
    }
}

public class MainClass
{
    public static void Main(string[] args)
    {
        Circle circle = new Circle(5);
        Square square = new Square(4);

        Console.WriteLine(“Область: " + circle.CalculateArea());
        Console.WriteLine("Область: " + square.CalculateArea());
    }
}





